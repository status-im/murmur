{"version":3,"sources":["../src/server.js"],"names":["express","require","bodyParser","chalk","program","version","option","parse","process","argv","app","ENABLE_WS","ws","WS_PORT","wsport","undefined","DEVP2P_PORT","devp2pPort","LIBP2P_PORT","libp2pPort","IS_BRIDGE","libp2p","devp2p","bridge","SIGNAL_SERVER","signalServers","split","Provider","provider","nodes","start","push","LibP2PNode","Manager","_manager","isBridge","setupNodes","use","urlencoded","extended","json","_req","on","msg","sendAsync","JSON","err","jsonResponse","console","dir","send","error","result","listen","log","yellow"],"mappings":"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","sourcesContent":["const express = require('express');\nconst bodyParser = require('body-parser');\nconst chalk = require('chalk');\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('--ws', 'Enable the WS-RPC server')\n  .option('--wsport [port]', 'WS-RPC Port (default: 8546)')\n  .option('--devp2p-port [port]', \"DEVP2P Port (default: 30303\")\n  .option('--libp2p-port [port]', \"LIBP2P Port (default: 0\")\n  .option('--no-devp2p', 'Disable DEVP2P')\n  .option('--no-libp2p', 'Disable LIBP2P')\n  .option('--no-bridge', \"Disable bridge between LIBP2P and DEVP2P\")\n  .option('--signal-servers [url]', \"Signal server url (ws://127.0.0.1:9090,...\")\n  .parse(process.argv);\n\nlet app;\nconst ENABLE_WS = program.ws === true;\nconst WS_PORT =  program.wsport !== undefined ? parseInt(program.wsport, 10) : 8546;\nconst DEVP2P_PORT =  program.devp2pPort !== undefined ? parseInt(program.devp2pPort, 10) : 30303;\nconst LIBP2P_PORT =  program.libp2pPort !== undefined ? parseInt(program.libp2pPort, 10) : 0;\nconst IS_BRIDGE = program.libp2p && program.devp2p && program.bridge;\nconst SIGNAL_SERVER = program.signalServers !== undefined ? program.signalServers.split(\",\") : [];\n\nif(ENABLE_WS){\n  app = express();\n  require('express-ws')(app);\n}\n\n(async () => {\n\n  const Provider = require('./provider');\n  const provider = new Provider();\n  const nodes = [];\n\n  if(program.devp2p){\n    const devp2p = require('./client.js');\n    devp2p.start();\n    nodes.push(devp2p);\n  }\n\n  // TODO: validate signal servers format\n\n  if(program.libp2p){\n    const LibP2PNode = require('./libp2p-node.js');\n    const libp2p =  new LibP2PNode({signalServers: SIGNAL_SERVER});\n    libp2p.start();\n    nodes.push(libp2p);\n  }\n\n  const Manager = require('./manager');\n  const _manager = new Manager(provider, {isBridge: IS_BRIDGE});\n  _manager.setupNodes(nodes);\n  _manager.start();\n\n  if(!ENABLE_WS) return;\n  \n  app.use(bodyParser.urlencoded({extended: true}));\n  app.use(bodyParser.json());\n\n  app.ws('/', function(ws, _req) {\n    ws.on('message', function(msg) {\n      provider.sendAsync(JSON.parse(msg), (err, jsonResponse) => {\n        if (err) {\n          console.dir(err);\n          ws.send({error: err});\n        }\n        ws.send(JSON.stringify(jsonResponse));\n      });\n    });\n    provider.on('data', (result) => {\n      \n      // TODO: actually should only do this for subscribers.....\n      //console.dir(\"======================\");\n      //console.dir(\"sending....\");\n      //console.log(JSON.stringify(result));\n      //console.dir(result);\n      ws.send(JSON.stringify(result));\n      //console.dir(\"======================\");\n    });\n  });\n\n  app.listen(WS_PORT, () => console.log(chalk.yellow(`Murmur listening on port ${WS_PORT}`)));\n\n})();\n"],"file":"server.js"}