{"version":3,"sources":["../src/index.js"],"names":["Provider","require","Manager","Murmur","constructor","options","isBridge","protocols","signalServers","bootnodes","nodes","length","provider","manager","onReady","cb","executeOnReady","start","indexOf","devp2p","connectTo","address","udpPort","tcpPort","push","LibP2PNode","libp2p","isBrowser","window","setupNodes","readyCB","module","exports"],"mappings":";;AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AAEA,MAAME,MAAN,CAAa;AACXC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKC,QAAL,GAAgBD,OAAO,CAACC,QAAxB;AACA,SAAKC,SAAL,GAAiBF,OAAO,CAACE,SAAR,IAAqB,EAAtC;AACA,SAAKC,aAAL,GAAqBH,OAAO,CAACG,aAAR,IAAyB,EAA9C;AACA,SAAKC,SAAL,GAAiBJ,OAAO,CAACI,SAAR,IAAqB,EAAtC;AACA,SAAKC,KAAL,GAAa,EAAb;;AAEA,QAAG,KAAKH,SAAL,CAAeI,MAAf,IAAyB,CAA5B,EAA8B;AAC5B,WAAKL,QAAL,GAAgB,KAAhB;AACD;;AAED,SAAKM,QAAL,GAAgB,IAAIZ,QAAJ,EAAhB;AACA,SAAKa,OAAL,GAAe,IAAIX,OAAJ,CAAY,KAAKU,QAAjB,EAA2B;AACxCN,MAAAA,QAAQ,EAAE,KAAKA;AADyB,KAA3B,CAAf;AAGD;;AAEDQ,EAAAA,OAAO,CAACC,EAAD,EAAI;AACT,SAAKF,OAAL,CAAaG,cAAb,CAA4BD,EAA5B;AACD;;AAED,QAAME,KAAN,GAAc;AACZ,QAAG,KAAKV,SAAL,CAAeW,OAAf,CAAuB,QAAvB,IAAmC,CAAC,CAAvC,EAAyC;AACvC,YAAMC,MAAM,GAAGlB,OAAO,CAAC,aAAD,CAAtB;;AACAkB,MAAAA,MAAM,CAACF,KAAP;AACAE,MAAAA,MAAM,CAACC,SAAP,CAAiB;AAACC,QAAAA,OAAO,EAAE,WAAV;AAAuBC,QAAAA,OAAO,EAAE,KAAhC;AAAuCC,QAAAA,OAAO,EAAE;AAAhD,OAAjB;AACA,WAAKb,KAAL,CAAWc,IAAX,CAAgBL,MAAhB;AACD;;AAED,QAAG,KAAKZ,SAAL,CAAeW,OAAf,CAAuB,QAAvB,IAAmC,CAAC,CAAvC,EAAyC;AACvC,YAAMO,UAAU,GAAGxB,OAAO,CAAC,kBAAD,CAA1B;;AACA,YAAMyB,MAAM,GAAG,IAAID,UAAJ,CAAe;AAC5BE,QAAAA,SAAS,EAAE,OAAOC,MAAP,KAAkB,WADD;AAE5BnB,QAAAA,SAAS,EAAE,KAAKA,SAFY;AAG5BD,QAAAA,aAAa,EAAE,KAAKA;AAHQ,OAAf,CAAf;AAKAkB,MAAAA,MAAM,CAACT,KAAP;AACA,WAAKP,KAAL,CAAWc,IAAX,CAAgBE,MAAhB;AACD;;AAED,SAAKb,OAAL,CAAagB,UAAb,CAAwB,KAAKnB,KAA7B;AACA,SAAKG,OAAL,CAAaI,KAAb,CAAmB,KAAKa,OAAxB;AACD;;AA3CU;;AA8CbC,MAAM,CAACC,OAAP,GAAiB7B,MAAjB","sourcesContent":["const Provider = require('./provider');\nconst Manager = require('./manager');\n\nclass Murmur {  \n  constructor(options) {\n    this.isBridge = options.isBridge;\n    this.protocols = options.protocols || [];\n    this.signalServers = options.signalServers || [];\n    this.bootnodes = options.bootnodes || [];\n    this.nodes = [];\n    \n    if(this.protocols.length != 2){\n      this.isBridge = false;\n    }\n    \n    this.provider = new Provider();\n    this.manager = new Manager(this.provider, {\n      isBridge: this.isBridge\n    });\n  }\n\n  onReady(cb){\n    this.manager.executeOnReady(cb);\n  }\n\n  async start() {\n    if(this.protocols.indexOf(\"devp2p\") > -1){\n      const devp2p = require(\"./client.js\");\n      devp2p.start();\n      devp2p.connectTo({address: '127.0.0.1', udpPort: 30303, tcpPort: 30303});\n      this.nodes.push(devp2p);\n    }\n\n    if(this.protocols.indexOf(\"libp2p\") > -1){\n      const LibP2PNode = require('./libp2p-node.js');\n      const libp2p = new LibP2PNode({\n        isBrowser: typeof window !== 'undefined',\n        bootnodes: this.bootnodes,\n        signalServers: this.signalServers,\n      });\n      libp2p.start();\n      this.nodes.push(libp2p);\n    }\n\n    this.manager.setupNodes(this.nodes);\n    this.manager.start(this.readyCB);\n  }\n}\n\nmodule.exports = Murmur;\n"],"file":"index.js"}