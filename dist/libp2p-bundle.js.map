{"version":3,"sources":["../src/libp2p-bundle.js"],"names":["WebRTCStar","require","WebSockets","WebSocketStar","Bootstrap","Multiplex","SPDY","SECIO","libp2p","WebSocketStarMulti","data","BOOTNODES","bootnodes","SIGNALSERVERS","signalServers","LibP2PBundle","constructor","peerInfo","options","startWRTC","length","wrtcStar","wrtc","id","map","addr","ma","toB58String","multiaddrs","add","wsstar","servers","ignore_no_online","modules","transport","streamMuxer","connEncryption","peerDiscovery","discovery","config","webRTCStar","enabled","websocketStar","bootstrap","interval","list","relay","hop","active","EXPERIMENTAL","dht","pubsub","connectionManager","maxPeers","module","exports"],"mappings":"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","sourcesContent":["const WebRTCStar = require('libp2p-webrtc-star');\nconst WebSockets = require('libp2p-websockets');\nconst WebSocketStar = require('libp2p-websocket-star');\nconst Bootstrap = require('libp2p-bootstrap');\nconst Multiplex = require('libp2p-mplex');\nconst SPDY = require('libp2p-spdy');\nconst SECIO = require('libp2p-secio');\nconst libp2p = require('libp2p');\nconst WebSocketStarMulti = require('libp2p-websocket-star-multi');\n\nconst data = require('../data/config.json');\nconst BOOTNODES = data['libp2p'].bootnodes;\nconst SIGNALSERVERS = data['libp2p'].signalServers;\n\nclass LibP2PBundle extends libp2p {\n  constructor (peerInfo, options) {\n    let startWRTC = !!options.startWRTC;\n    let signalServers = options.signalServers && options.signalServers.length ? options.signalServers : [];\n    if(!signalServers.length) signalServers = SIGNALSERVERS && SIGNALSERVERS.length ? SIGNALSERVERS : [];\n\n    let bootnodes = options.bootnodes && options.bootnodes.length ? options.bootnodes : [];\n    if(!bootnodes.length) bootnodes = BOOTNODES && BOOTNODES.length ? BOOTNODES : [];\n\n    let wrtcStar;\n    if(startWRTC){\n      const wrtc = require('wrtc');\n      wrtcStar = new WebRTCStar({ id: peerInfo.id, wrtc: wrtc });\n    } else {\n      wrtcStar = new WebRTCStar({id: peerInfo.id});\n    }\n\n    signalServers.map(addr => {\n      const ma = addr + \"/ipfs/\" +  peerInfo.id.toB58String();\n      peerInfo.multiaddrs.add(ma);\n    });\n    \n    // TODO: this should work with a single WRTC servers\n    //const wsstar = new WebSocketStar({ id: peerInfo.id });\n\n\n    // TODO: this should work with multiple WRTC servers\n    const wsstar = new WebSocketStarMulti({ \n      servers: signalServers, \n      id: peerInfo.id, \n      ignore_no_online: true\n    });\n\n    super({\n      modules: {\n        transport: [\n          wrtcStar,\n          WebSockets,\n          wsstar\n        ],\n        streamMuxer: [Multiplex, SPDY],\n        connEncryption: [SECIO],\n        peerDiscovery: [\n          wrtcStar.discovery,\n          wsstar.discovery,\n          Bootstrap\n        ],\n      },\n      peerInfo,\n      config: {\n        peerDiscovery: {\n          webRTCStar: {\n            enabled: true\n          },\n          websocketStar: {\n            enabled: true\n          },\n          bootstrap: {\n            interval: 10000,\n            enabled: true,\n            list: bootnodes\n          }\n        },\n        relay: {\n          enabled: true,\n          hop: {\n            enabled: true,\n            active: false\n          }\n        },\n        EXPERIMENTAL: {\n          dht: false,\n          pubsub: false\n        }\n      },\n      connectionManager: {\n        maxPeers: 15\n      }\n    });\n  }\n}\n\nmodule.exports = LibP2PBundle;\n"],"file":"libp2p-bundle.js"}