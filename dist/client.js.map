{"version":3,"sources":["../src/client.js"],"names":["DevP2PNode","require","randomBytes","config","CHAIN_ID","BOOTNODES","bootstrapNodes","filter","node","chainId","map","address","ip","udpPort","port","tcpPort","STATICNODES","devp2p","p","split","q","id","Buffer","from","replace","privateKey","account","bootnodes","staticnodes","type","module","exports"],"mappings":";;AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,kBAAD,CAA1B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAkBD,OAAO,CAAC,mBAAD,CAA/B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,qBAAD,CAAtB;;AACA,MAAMG,QAAQ,GAAG,CAAjB;;AAEA,MAAMC,SAAS,GAAGJ,OAAO,CAAC,iBAAD,CAAP,CAA2BK,cAA3B,CAA0CC,MAA1C,CAAkDC,IAAD,IAAU;AAC3E,SAAOA,IAAI,CAACC,OAAL,KAAiBL,QAAxB;AACD,CAFiB,EAEfM,GAFe,CAEVF,IAAD,IAAU;AACf,SAAO;AACLG,IAAAA,OAAO,EAAEH,IAAI,CAACI,EADT;AAELC,IAAAA,OAAO,EAAEL,IAAI,CAACM,IAFT;AAGLC,IAAAA,OAAO,EAAEP,IAAI,CAACM;AAHT,GAAP;AAKD,CARiB,CAAlB;;AAUA,MAAME,WAAW,GAAGb,MAAM,CAACc,MAAP,CAAc,cAAd,EAA8BP,GAA9B,CAAmCF,IAAD,IAAU;AAC9D,QAAMU,CAAC,GAAGV,IAAI,CAACW,KAAL,CAAW,GAAX,CAAV;AACA,QAAMC,CAAC,GAAGF,CAAC,CAAC,CAAD,CAAD,CAAKC,KAAL,CAAW,GAAX,CAAV;AAEA,QAAME,EAAE,GAAGC,MAAM,CAACC,IAAP,CAAYL,CAAC,CAAC,CAAD,CAAD,CAAKM,OAAL,CAAa,UAAb,EAAyB,EAAzB,CAAZ,EAA0C,KAA1C,CAAX;AACA,QAAMb,OAAO,GAAGS,CAAC,CAAC,CAAD,CAAjB;AACA,QAAMN,IAAI,GAAGM,CAAC,CAAC,CAAD,CAAd;AAEA,SAAO;AAAEC,IAAAA,EAAF;AAAMV,IAAAA,OAAN;AAAeG,IAAAA;AAAf,GAAP;AACD,CATmB,CAApB,C,CAYA;;AACA,MAAMW,UAAU,GAAGtB,MAAM,CAACuB,OAAP,GAAiBJ,MAAM,CAACC,IAAP,CAAYpB,MAAM,CAACuB,OAAnB,EAA4B,KAA5B,CAAjB,GAAsDxB,WAAW,CAAC,EAAD,CAApF;AAGA,MAAMM,IAAI,GAAI,IAAIR,UAAJ,CAAe;AAC3BS,EAAAA,OAAO,EAAEL,QADkB;AAE3BqB,EAAAA,UAF2B;AAG3BE,EAAAA,SAAS,EAAEtB,SAHgB;AAI3BuB,EAAAA,WAAW,EAAEZ;AAJc,CAAf,CAAd;AAOAR,IAAI,CAACqB,IAAL,GAAY,QAAZ;AAEAC,MAAM,CAACC,OAAP,GAAiBvB,IAAjB","sourcesContent":["const DevP2PNode = require('./devp2p-node.js');\nconst { randomBytes } = require('crypto-browserify');\nconst config = require('../data/config.json');\nconst CHAIN_ID = 3;\n\nconst BOOTNODES = require('ethereum-common').bootstrapNodes.filter((node) => {\n  return node.chainId === CHAIN_ID;\n}).map((node) => {\n  return {\n    address: node.ip,\n    udpPort: node.port,\n    tcpPort: node.port\n  };\n});\n\nconst STATICNODES = config.devp2p[\"static-nodes\"].map((node) => {\n  const p = node.split(\"@\");\n  const q = p[1].split(\":\");\n\n  const id = Buffer.from(p[0].replace(\"enode://\", \"\"), \"hex\");\n  const address = q[0];\n  const port = q[1];\n\n  return { id, address, port };\n});\n\n\n// TODO: probably not secure and prone to errors. Fix\nconst privateKey = config.account ? Buffer.from(config.account, \"hex\") : randomBytes(32);\n\n\nconst node  = new DevP2PNode({\n  chainId: CHAIN_ID,\n  privateKey,\n  bootnodes: BOOTNODES,\n  staticnodes: STATICNODES\n});\n\nnode.type = \"devp2p\";\n\nmodule.exports = node;\n"],"file":"client.js"}