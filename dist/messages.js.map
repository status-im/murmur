{"version":3,"sources":["../src/messages.js"],"names":["keccak256","require","constants","randomBytes","createHash","createECDH","createHmac","createCipheriv","createDecipheriv","stripHexPrefix","secp256k1","hexToBytes","hex","toString","replace","bytes","c","length","push","substr","assignDefined","target","sources","source","key","val","undefined","addPayloadSizeField","msg","payload","fieldSize","getSizeOfPayloadSizeField","field","Buffer","alloc","writeUInt32LE","slice","concat","s","i","kdf","hashName","z","s1","kdLen","cb","reps","Math","pow","counter","from","k","hash","update","digest","aes128enc","m","blSize","iv","cipher","firstChunk","secondChunk","final","aes128dec","ct","ciphertext","equalConstTime","b1","b2","res","decryptAsymmetric","data","privKey","setPrivateKey","computeSecret","keyLen","ke","km","hashSize","mEnd","messageTag","decrypted","msgObj","parseMessage","encryptAsymmetric","envelope","pubKey","ephemeralKey","generateKeys","em","getPublicKey","encryptSymmetric","topic","options","symKey","symmetricKey","validateDataIntegrity","symKeyLength","errMsg","salt","aesNonceLength","tag","getAuthTag","decryptSymmetric","errorMsg","decipher","setAuthTag","message","start","auxiliaryFieldSize","readUIntLE","flagMask","auxiliaryField","isSigned","isSignedMask","signature","getSignature","getHash","ecRecoverPubKey","padding","plaintextBuffer","signatureLength","messageHash","recovery","readIntBE","recover","expectedSize","equals","buildMessage","messagePayload","sig","flagsLength","padSizeLimit","rawSize","odd","paddingSize","pad","sign","module","exports"],"mappings":"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","sourcesContent":["// const elliptic = require(\"elliptic\");\nconst {keccak256} = require(\"eth-lib/lib/hash\");\n// const {slice, length, toNumber} = require(\"eth-lib/lib/bytes\");\nconst constants = require('./constants');\nconst { randomBytes, createHash, createECDH, createHmac, createCipheriv, createDecipheriv } = require('crypto-browserify');\nconst stripHexPrefix = require('strip-hex-prefix');\nconst secp256k1 = require('secp256k1');\n\nconst hexToBytes = (hex) => {\n  hex = hex.toString(16);\n  hex = hex.replace(/^0x/i,'');\n  let bytes = [];\n  for (let c = 0; c < hex.length; c += 2) {\n    bytes.push(parseInt(hex.substr(c, 2), 16));\n  }\n  return bytes;\n};\n\nconst assignDefined = (target, ...sources) => {\n  for (const source of sources) {\n    for (const key of Object.keys(source)) {\n      const val = source[key];\n      if (val !== undefined) {\n        target[key] = val;\n      }\n    }\n  }\n  return target;\n};\n\nconst addPayloadSizeField = (msg, payload) => {\n  let fieldSize = getSizeOfPayloadSizeField(payload);\n  let field = Buffer.alloc(4);\n  field.writeUInt32LE(payload.length, 0);\n  field = field.slice(0, fieldSize);\n  msg = Buffer.concat([msg, field]);\n  msg[0] |= fieldSize;\n  return msg;\n};\n\nconst getSizeOfPayloadSizeField = (payload) => {\n  let s = 1;\n  for (let i = payload.length; i>= 256; i /= 256) {\n    s++;\n  }\n  return s;\n};\n\nconst kdf = (hashName, z, s1, kdLen, cb) => {\n  const reps = ((kdLen + 7) * 8) / (64 * 8);\n  if (reps > Math.pow(2, 32) - 1) {\n    cb(\"Data too long\");\n    return;\n  }\n\n  let counter = Buffer.from([0,0,0,1]);\n  let k = Buffer.from([]);\n\n  for(let i = 0; i <= reps; i++){\n    const hash = createHash(hashName);\n    hash.update(Buffer.from(counter));\n    hash.update(z);\n    hash.update(s1);\n    k = Buffer.concat([k, hash.digest()]);\n    counter[3]++;\n  }\n\n  return k.slice(0, 32);\n};\n\nconst aes128enc = (m, key) => {\n  const blSize = 16;\n  const iv = randomBytes(blSize);\n  var cipher = createCipheriv(\"aes-128-ctr\", key, iv);\n  var firstChunk = cipher.update(m);\n  var secondChunk = cipher.final();\n  return (Buffer.concat([iv, firstChunk, secondChunk]));\n};\n\nconst aes128dec = (ct, key) => {\n  const blSize = 16;\n  const iv = ct.slice(0, blSize);\n  const ciphertext = ct.slice(blSize);\n\n  var cipher = createDecipheriv(\"aes-128-ctr\", key, iv);\n  var firstChunk = cipher.update(ciphertext);\n  var secondChunk = cipher.final();\n\n  return (Buffer.concat([firstChunk, secondChunk]));\n};\n\n// From parity ECIES\n// Compare two buffers in constant time to prevent timing attacks.\nfunction equalConstTime(b1, b2) {\n  if (b1.length !== b2.length) {\n    return false;\n  }\n  var res = 0;\n  for (var i = 0; i < b1.length; i++) {\n    res |= b1[i] ^ b2[i];  // jshint ignore:line\n  }\n  return res === 0;\n}\n\nconst decryptAsymmetric = (key, data, cb) => {\n  const privKey = createECDH('secp256k1');\n  privKey.setPrivateKey(key);\n\n  const z = privKey.computeSecret(data.slice(0, 65));\n\n  const k = kdf(\"sha256\", z, Buffer.from([]), 32);\n  if (k === null) return;\n\n  const keyLen = 16;\n  const ke = k.slice(0, keyLen);\n  let km = k.slice(keyLen);\n  km = createHash(\"sha256\").update(km).digest();\n\n  const hashSize = 32;\n  const mEnd = data.length - hashSize;\n  const ct = data.slice(65, mEnd);\n\n  // Message Tag\n  const messageTag = createHmac('sha256', km).update(ct).update(\"\").digest();\n\n  if (!equalConstTime(messageTag, data.slice(mEnd))){\n    return cb(\"Invalid Message\");\n  }\n\n  const decrypted = aes128dec(ct, ke);\n\n  const msgObj = parseMessage(decrypted);\n\n  cb(null, msgObj);\n};\n\nconst encryptAsymmetric = (envelope, pubKey, cb) => {\n  const ephemeralKey = createECDH('secp256k1');\n  ephemeralKey.generateKeys();\n\n  const z = ephemeralKey.computeSecret(Buffer.from(stripHexPrefix(pubKey), 'hex'));\n\n  const k = kdf(\"sha256\", z, Buffer.from([]), 32);\n  if (k === null) return;\n\n  const keyLen = 16;\n  const ke = k.slice(0, keyLen);\n  let km = k.slice(keyLen);\n  km = createHash(\"sha256\").update(km).digest();\n\n  const em = aes128enc(envelope, ke);\n\n  const messageTag = createHmac('sha256', km).update(em).update(\"\").digest();\n\n  const msgObj = Buffer.concat([ephemeralKey.getPublicKey(), em, messageTag]);\n\n  cb(null, msgObj);\n};\n\nconst encryptSymmetric = (topic, envelope, options, cb) => {\n  const symKey = Buffer.from(stripHexPrefix(options.symKey.symmetricKey), 'hex');\n\n  if(!validateDataIntegrity(symKey, constants.symKeyLength)){\n    const errMsg = \"invalid key provided for symmetric encryption, size: \" + symKey.length;\n    if(cb) return cb(errMsg);\n    throw errMsg;\n  }\n\n  const salt = randomBytes(constants.aesNonceLength);\n\n  const cipher = createCipheriv('aes-256-gcm', symKey, salt);\n  const ciphertext = Buffer.concat([cipher.update(envelope, 'hex'), cipher.final()]);\n  const tag = cipher.getAuthTag();\n\n  envelope = Buffer.concat([ciphertext, tag, salt]);\n\n  cb(null, envelope);\n};\n\nconst decryptSymmetric = (topic, key, data, cb) => {\n  if (data.length < constants.aesNonceLength) {\n    const errorMsg = \"missing salt or invalid payload in symmetric message\";\n    if (cb) return cb(errorMsg);\n    throw errorMsg;\n  }\n\n  const salt = data.slice(data.length - constants.aesNonceLength);\n  const msg = data.slice(0, data.length - 12);\n\n  const decipher = createDecipheriv('aes-256-gcm', key, salt);\n        decipher.setAuthTag(msg.slice(msg.length - 16));\n\n  const message =  Buffer.concat([decipher.update(msg.slice(0, msg.length - 16), 'hex'), decipher.final()]);\n\n  const msgObj = parseMessage(message);\n\n  cb(null, msgObj);\n};\n\nconst parseMessage = (message) => {\n  let start = 1;\n  // const end = message.length;\n\n  let payload;\n  let pubKey;\n\n  const auxiliaryFieldSize = message.readUIntLE(0, 1) & constants.flagMask;\n\n  let auxiliaryField;\n  if (auxiliaryFieldSize !== 0) {\n    auxiliaryField = message.readUIntLE(start, auxiliaryFieldSize);\n    start += auxiliaryFieldSize;\n    payload = message.slice(start, start + auxiliaryField);\n  }\n\n  const isSigned = (message.readUIntLE(0, 1) & constants.isSignedMask) == constants.isSignedMask;\n  let signature = null;\n  if (isSigned) {\n    signature = getSignature(message);\n    const hash = getHash(message, isSigned);\n    pubKey = ecRecoverPubKey(hash, signature);\n  }\n\n  // TODO: calculate padding\n  let padding = null;\n\n  return assignDefined({}, {payload, pubKey, signature, padding});\n};\n\nconst getSignature = (plaintextBuffer) => {\n  return plaintextBuffer.slice(plaintextBuffer.length - constants.signatureLength, plaintextBuffer.length);\n};\n\nconst getHash = (plaintextBuffer, isSigned) => {\n  if (isSigned){\n    return keccak256(hexToBytes(plaintextBuffer.slice(0, plaintextBuffer.length - constants.signatureLength).toString('hex')));\n  }\n  return keccak256(hexToBytes(plaintextBuffer.toString('hex')));\n};\n\nconst ecRecoverPubKey = (messageHash, signature) => {\n  const recovery = signature.slice(64).readIntBE(0, 1);\n  return secp256k1.recover(Buffer.from(messageHash.slice(2), \"hex\"), signature.slice(0, 64), recovery, false);\n};\n\nconst validateDataIntegrity = (k, expectedSize) => {\n  if (k.length !== expectedSize) {\n    return false;\n  }\n\n  if (expectedSize > 3 && k.equals(Buffer.alloc(k.length))){\n    return false;\n  }\n\n  return true;\n};\n\nconst buildMessage = (messagePayload, padding, sig, options, cb) => {\n  // TODO: extract to constants\n  const flagsLength = 1;\n  // const payloadSizeFieldMaxSize = 4;\n  // const signatureLength = 65;\n  const padSizeLimit = 256;\n\n  let envelope = Buffer.from([0]); // No flags\n  envelope = addPayloadSizeField(envelope, messagePayload);\n  envelope = Buffer.concat([envelope, messagePayload]);\n\n  if (!!padding){\n    envelope = Buffer.concat([envelope, padding]);\n  } else {\n    // Calculate padding:\n    let rawSize = flagsLength + getSizeOfPayloadSizeField(messagePayload) + messagePayload.length;\n\n    if (options.from){\n      rawSize += constants.signatureLength;\n    }\n\n    const odd = rawSize % padSizeLimit;\n    const paddingSize = padSizeLimit - odd;\n    const pad = randomBytes(paddingSize);\n\n    if (!validateDataIntegrity(pad, paddingSize)) {\n      return cb(\"failed to generate random padding of size \" + paddingSize);\n    }\n\n    envelope = Buffer.concat([envelope, pad]);\n  }\n\n  if (sig !== null){\n    // Sign the message\n    if (envelope.readUIntLE(0, 1) & constants.isSignedMask){ // Is Signed\n      cb(\"failed to sign the message: already signed\");\n    }\n\n    envelope[0] |= constants.isSignedMask;\n    const hash = keccak256(\"0x\" + envelope.toString('hex'));\n    const s = secp256k1.sign(Buffer.from(hash.slice(2), 'hex'), Buffer.from(options.from.privKey.slice(2), 'hex'));\n    envelope = Buffer.concat([envelope, s.signature, Buffer.from([s.recovery])]);\n  }\n\n  return envelope;\n};\n\nmodule.exports = {\n  decryptSymmetric,\n  decryptAsymmetric,\n  encryptSymmetric,\n  encryptAsymmetric,\n  hexToBytes,\n  buildMessage,\n  parseMessage,\n  validateDataIntegrity\n};\n"],"file":"messages.js"}