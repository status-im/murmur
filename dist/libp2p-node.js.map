{"version":3,"sources":["../src/libp2p-node.js"],"names":["PeerInfo","require","PeerId","LibP2PBundle","chalk","pull","drain","rlp","Events","config","p2pNode","libP2Phello","eventEmitter","err","console","log","yellow","isStarted","peerInfo","multiaddrs","forEach","ma","toString","emit","createNode","self","resolve","reject","nodeHandler","startWRTC","isBrowser","signalServers","bootnodes","old_start","start","events","handle","protocol","conn","map","v","decode","Buffer","from","messages","getPeerInfo","message","tracker","exists","expiry","ttl","topic","data","nonce","push","broadcast","encode","privateKey","account","peerId","createFromHexString","create","LibP2PNode","constructor","options","staticnodes","trustedPeers","peers","type","setTracker","node","_startDiscovery","on","peer","dial","green","id","toB58String","error","red","msg","cb","values","dialProtocol","addTrustedPeer","isTooOld","dt","Date","getTime","readUInt32BE","module","exports"],"mappings":"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","sourcesContent":["const PeerInfo = require('peer-info');\nconst PeerId = require('peer-id');\nconst LibP2PBundle = require('./libp2p-bundle');\nconst chalk = require('chalk');\nconst pull = require('pull-stream');\nconst drain = require('pull-stream/sinks/drain');\nconst rlp = require('rlp-encoding');\nconst Events = require('events');\nconst config = require('../data/config.json');\n\nlet p2pNode;\n\nconst libP2Phello = eventEmitter => err => {\n  if (err) { throw err; }\n  console.log(chalk.yellow(`* libP2P started: ${p2pNode.isStarted()}, listening on:`));\n  p2pNode.peerInfo.multiaddrs.forEach((ma) => console.log(chalk.yellow(\"- \" + ma.toString())));\n  eventEmitter.emit('ready');\n};\n\nconst createNode = (self) => {\n  return new Promise(function(resolve, reject) {\n\n    const nodeHandler = (err, peerInfo) => {\n      if(err) {\n        reject(err);\n      }\n\n      p2pNode = new LibP2PBundle(peerInfo, {\n        startWRTC: !self.isBrowser,\n        signalServers: self.signalServers,\n        bootnodes: self.bootnodes\n      });  \n  \n      p2pNode.old_start = p2pNode.start;\n      p2pNode.start = () => {\n        p2pNode.old_start(libP2Phello(self.events));\n      };\n\n      p2pNode.handle('/ethereum/shh/6.0.0', (protocol, conn) => {\n        pull(conn,\n          pull.map((v) => rlp.decode(Buffer.from(v.toString(), 'hex'))),\n          drain(messages => {\n            conn.getPeerInfo((err, peerInfo) => {\n            \n            const message = messages[0];\n            if(self.tracker.exists(message, 'libp2p')) return;\n\n            let [expiry, ttl, topic, data, nonce] = message[0]; // TODO: Refactor with function to obtain data object\n\n\n            // TODO: for mailservers, inspect peer\n            // Verifying if old message is sent by trusted peer by inspecting peerInfo.multiaddrs\n            /*if(self.isTooOld(expiry) && !PEER_IS_TRUSTED){\n              // console.log(\"Discarting old envelope\");\n              return;\n            }*/\n            \n            self.tracker.push(message, 'libp2p');\n\n            // Broadcast received message again.\n            self.broadcast(rlp.encode(messages));\n\n            self.events.emit('shh_message', message);\n            });\n          })\n        );\n      });\n      resolve(p2pNode);\n    };\n\n    // TODO: probably not secure and prone to errors. Fix\n    //       also, what's the diff between createFromHexString and createFromPrivKey?\n    const privateKey = config.account ? Buffer.from(config.account, \"hex\") : null;\n    if(privateKey){\n      const peerId = PeerId.createFromHexString(privateKey);\n      PeerInfo.create(peerId, nodeHandler);\n    } else {\n      PeerInfo.create(nodeHandler);\n    }\n  });\n};\n\n\nclass LibP2PNode {\n    constructor(options){\n      if(!options) options = {};\n      this.privateKey = options.privateKey;\n      this.bootnodes = options.bootnodes || [];\n      this.staticnodes = options.staticnodes || [];\n      this.trustedPeers = [];\n      this.events = new Events();\n      this.peers = {};\n      this.type = \"libp2p\";\n      this.tracker = null;\n      this.isBrowser = options.isBrowser || false;\n      this.signalServers = options.signalServers || [];\n    }\n\n    setTracker(tracker){\n      this.tracker = tracker;\n    }\n\n    async start(){\n      this.node = await createNode(this);\n      this.node.start();\n      this._startDiscovery();\n    }\n\n  _startDiscovery() {\n    this.node.on('peer:discovery', (peer) => {\n      // console.log('Discovered:', peer.id.toB58String());\n      this.node.dial(peer, () => { });\n    });\n    \n    this.node.on('peer:connect', (peer) => {\n      console.log(chalk.green(`Add libp2p peer: ${peer.id.toB58String()}`));\n      this.peers[peer.id.toB58String()] = { peer };\n    });\n\n    this.node.on('peer:disconnect', (peer) => {\n      delete this.peers[peer.id.toB58String()];\n      console.error(chalk.red(`Peer disconnected - (${peer.id.toB58String()}`));\n    });\n  }\n\n  broadcast(msg, peerId) {\n    const cb = msg => (err, conn) => {\n      if (!err) pull(pull.values([msg.toString('hex')]), conn);\n    };\n\n    if (peerId) {\n      this.node.dialProtocol(peerId, '/ethereum/shh/6.0.0', cb(msg));\n    } else {\n      for (let peerId of Object.keys(this.peers)) {\n        let peer = this.peers[peerId].peer;\n        this.node.dialProtocol(peer, '/ethereum/shh/6.0.0', cb(msg));\n      }\n    }\n  }\n\n  addTrustedPeer(node){\n    this.trustedPeers.push(node);\n  }\n\n  isTooOld(expiry) {\n    const dt = (new Date()).getTime() / 1000;\n    return expiry.readUInt32BE(0) < dt;\n  }\n}\n\n\nmodule.exports = LibP2PNode;\n"],"file":"libp2p-node.js"}