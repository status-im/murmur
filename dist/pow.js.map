{"version":3,"sources":["../src/pow.js"],"names":["keccak256","require","rlp","Big","Uint64BE","hrtime","hexStringToDecString","s","add","_x","_y","c","r","x","split","map","Number","y","length","pop","unshift","join","dec","forEach","chr","n","t","BYTE1","BYTE2","BYTE3","BYTE4","BYTE5","BYTE6","BYTE7","BYTE8","firstBitSet","v","byteindex","i","byte","powToFirstBit","pow","data","ttl","size","res","Math","ceil","log2","NS_PER_SEC","getTime","calculatePoW","Expiry","TTL","Topic","Data","Nonce","buf","Buffer","alloc","h","from","encode","concat","slice","d","firstBit","div","toString","ProofOfWork","powTarget","powTime","topic","expiry","target","undefined","bestBit","resNonce","finish","outerLoop","nonce","toBuffer","plus","console","log","module","exports"],"mappings":"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","sourcesContent":["const keccak256 = require('js-sha3').keccak256;\nconst rlp = require('rlp-encoding');\nconst Big = require('big.js');\nconst Uint64BE = require(\"int64-buffer\").Uint64BE;\nconst hrtime = require('browser-process-hrtime');\n\nfunction hexStringToDecString(s) {\n    function add(_x, _y) {\n        var c = 0, r = [];\n        var x = _x.split('').map(Number);\n        var y = _y.split('').map(Number);\n        while(x.length || y.length) {\n            var s = (x.pop() || 0) + (y.pop() || 0) + c;\n            r.unshift(s < 10 ? s : s - 10);\n            c = s < 10 ? 0 : 1;\n        }\n        if(c) r.unshift(c);\n        return r.join('');\n    }\n\n    var dec = '0';\n    s.split('').forEach(function(chr) {\n        var n = parseInt(chr, 16);\n        for(var t = 8; t; t >>= 1) {\n            dec = add(dec, dec);\n            if(n & t) dec = add(dec, '1');\n        }\n    });\n\n    return dec;\n  }\n\n\n  const BYTE1 = 1;       // 0001\n  const BYTE2 = 1 << 1;  // 0010\n  const BYTE3 = 1 << 2;  // 0100\n  const BYTE4 = 1 << 3;  // 1000\n  const BYTE5 = 1 << 4;  // 0001\n  const BYTE6 = 1 << 5;  // 0010\n  const BYTE7 = 1 << 6;  // 0100\n  const BYTE8 = 1 << 7;  // 1000\n\n\n  // Determine the index of the first bit set (BE)\n  const firstBitSet = (v) => {\n      let byteindex = 0;\n      for(let i = v.length - 1; i >= 0; i--){\n          const byte = v[i];\n          if((byte & BYTE1) === 1) return byteindex + 0;\n          if((byte & BYTE2) === 2) return byteindex + 1;\n          if((byte & BYTE3) === 4) return byteindex + 2;\n          if((byte & BYTE4) === 8) return byteindex + 3;\n          if((byte & BYTE5) === 16) return byteindex + 4;\n          if((byte & BYTE6) === 32) return byteindex + 5;\n          if((byte & BYTE7) === 64) return byteindex + 6;\n          if((byte & BYTE8) === 128) return byteindex + 7;\n\n          byteindex += 8;\n      }\n  };\n\n  const powToFirstBit = (pow, data, ttl) => {\n    const size = 20 + data.length;\n    const res = parseInt(Math.ceil(Math.log2(pow * size * ttl)), 10);\n    if(res < 1){\n      return 1;\n    }\n    return res;\n  };\n\n  const NS_PER_SEC = 1e9;\n\n\n  const getTime = () => {\n    const t = hrtime();\n    return t[0] * NS_PER_SEC + t[1];\n  };\n\n\n  // Given a Expiry, TTL, Topic, Nonce and Data Buffer\n  // calculate the Pow\n  // Useful to validate a envelope\n  const calculatePoW = (Expiry, TTL, Topic, Data, Nonce) => {\n    let buf = Buffer.alloc(32, 0);\n    const h = Buffer.from(keccak256(rlp.encode([Expiry, TTL, Topic, Data])), 'hex');\n\n    buf = Buffer.concat([h, buf]);\n    buf = Buffer.concat([buf.slice(0, buf.length - 8), Nonce]);\n\n    const d = Buffer.from(keccak256(buf));\n    const size = 20 + Data.length;\n\n    const firstBit = firstBitSet(d);\n\n    let x = (new Big(2)).pow(firstBit);\n    x = x.div(new Big(size));\n    x = x.div(new Big(TTL));\n\n    return x.toString();\n  };\n\n\n  function ProofOfWork(powTarget, powTime, ttl, topic, data, expiry){\n    if (powTarget === 0){\n      // TODO: Pow is not required\n      return {};\n    }\n\n    let target;\n\n    if (powTarget === undefined){\n      expiry += powTime;\n    } else {\n      target = powToFirstBit(powTarget, data, ttl);\n    }\n\n    let buf = Buffer.alloc(32);\n    const h = Buffer.from(keccak256(rlp.encode([expiry, ttl, topic, data])), 'hex');\n\n    buf = Buffer.concat([h, buf]);\n\n    let bestBit = -1;\n    // let firstBit;\n\n    let resNonce;\n\n    const finish = getTime() + powTime * 2 * NS_PER_SEC;\n\n    outerLoop:\n    for (let nonce = Big(0); getTime() < finish;){\n      for (let i = 0; i < 1024; i++){\n        buf = Buffer.concat([buf.slice(0, buf.length - 8), (new Uint64BE(nonce.toString(), 16)).toBuffer()]);\n\n        const d = Buffer.from(keccak256(buf));\n        const firstBit = firstBitSet(d);\n        if (firstBit > bestBit){\n          resNonce = nonce;\n          bestBit = firstBit;\n          if (target > 0 && bestBit >= target){\n            break outerLoop;\n          }\n        }\n        nonce = nonce.plus(new Big(1));\n      }\n    }\n\n    if(resNonce === undefined){\n      // TODO: CB\n      console.log(\"Failed to reach the PoW target, specified pow time (%d seconds) was insufficient\", powTarget);\n      return;\n    }\n\n    return {expiry, target, nonce: (new Uint64BE(resNonce.toString(), 16)).toBuffer()};\n  }\n\n\n  module.exports = {\n    hexStringToDecString,\n    firstBitSet,\n    calculatePoW,\n    ProofOfWork\n  };\n"],"file":"pow.js"}