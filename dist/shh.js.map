{"version":3,"sources":["../src/shh.js"],"names":["rlp","require","Events","constants","SHH","constructor","version","peer","send","events","_handleMessage","code","data","payload","decode","sendMessage","message","p2pMessage","forEach","envelope","_remoteId","toString","_socket","_peername","address","port","emit","encode","sendRawMessage","module","exports"],"mappings":";;AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAzB;;AAGA,MAAMG,GAAN,CAAU;AACRC,EAAAA,WAAW,CAACC,OAAD,EAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AAC/B,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAc,IAAIP,MAAJ,EAAd;AACD;;AAEDQ,EAAAA,cAAc,CAAEC,IAAF,EAAQC,IAAR,EAAc;AAC1B;AACA;AACA,QAAID,IAAI,KAAK,CAAb,EAAgB;AACd,YAAME,OAAO,GAAGb,GAAG,CAACc,MAAJ,CAAWF,IAAX,CAAhB,CADc,CAEf;AACC;AACD;;AACC,WAAKG,WAAL,CAAiBJ,IAAjB,EAAuBE,OAAvB;AACD;;AAED,QAAIF,IAAI,KAAKR,SAAS,CAACa,OAAnB,IAA8BL,IAAI,KAAKR,SAAS,CAACc,UAArD,EAAiE;AAC/D,YAAMJ,OAAO,GAAGb,GAAG,CAACc,MAAJ,CAAWF,IAAX,CAAhB,CAD+D,CAE/D;AACA;;AAEAC,MAAAA,OAAO,CAACK,OAAR,CAAiBC,QAAD,IAAc;AAC5B;AACA,cAAMZ,IAAI,GAAG,aAAa,KAAKA,IAAL,CAAUa,SAAV,CAAoBC,QAApB,CAA6B,KAA7B,CAAb,GAAmD,GAAnD,GAAyD,KAAKd,IAAL,CAAUe,OAAV,CAAkBC,SAAlB,CAA4BC,OAArF,GAA+F,GAA/F,GAAqG,KAAKjB,IAAL,CAAUe,OAAV,CAAkBC,SAAlB,CAA4BE,IAA9I;;AACA,aAAKhB,MAAL,CAAYiB,IAAZ,CAAiB,SAAjB,EAA4BP,QAA5B,EAAsCZ,IAAtC;AACD,OAJD;AAKD;AACF;;AAEDQ,EAAAA,WAAW,CAAEJ,IAAF,EAAQE,OAAR,EAAiB;AAC1B,SAAKL,IAAL,CAAUG,IAAV,EAAgBX,GAAG,CAAC2B,MAAJ,CAAWd,OAAX,CAAhB;AACD;;AAEDe,EAAAA,cAAc,CAACjB,IAAD,EAAOE,OAAP,EAAgB;AAC5B,SAAKL,IAAL,CAAUG,IAAV,EAAgBE,OAAhB;AACD;;AAtCO;;AA0CVgB,MAAM,CAACC,OAAP,GAAiB1B,GAAjB","sourcesContent":["const rlp = require('rlp-encoding');\nconst Events = require('events');\nconst constants = require('./constants');\n\n\nclass SHH {\n  constructor(version, peer, send) {\n    this.version = version;\n    this.peer = peer;\n    this.send = send;\n    this.events = new Events();\n  }\n\n  _handleMessage (code, data) {\n    // console.dir(\"----- whisper handleMessage\")\n    // console.dir(code)\n    if (code === 0) {\n      const payload = rlp.decode(data);\n     // console.dir(\"whisper status\")\n      //console.dir(\"version: \" + payload[0].toString('hex'))\n     // console.dir(\"something: \" + payload[1].toString('hex'))\n      this.sendMessage(code, payload);\n    }\n\n    if (code === constants.message || code === constants.p2pMessage) {\n      const payload = rlp.decode(data);\n      // console.dir(\"whisper received message\")\n      // console.dir(\"contains \" + payload.length + \" envelopes\")\n\n      payload.forEach((envelope) => {\n        // TODO: replace with envelope or decrypted fields, whatever abstraction makes more sense\n        const peer = \"enode://\" + this.peer._remoteId.toString('hex') + \"@\" + this.peer._socket._peername.address + \":\" + this.peer._socket._peername.port;\n        this.events.emit('message', envelope, peer);\n      });\n    }\n  }\n\n  sendMessage (code, payload) {\n    this.send(code, rlp.encode(payload));\n  }\n\n  sendRawMessage(code, payload) {\n    this.send(code, payload);\n  }\n\n}\n\nmodule.exports = SHH;\n"],"file":"shh.js"}