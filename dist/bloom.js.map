{"version":3,"sources":["../src/bloom.js"],"names":["stripHexPrefix","require","BloomFilterSize","createBloomFilter","message","topics","length","topicsToBloom","topic","topicToBloom","Buffer","isBuffer","from","b","alloc","index","Array","j","byteIndex","bitIndex","data","idx","bloom","i","combined","concat","slice","module","exports"],"mappings":";;;;;;AAAA,MAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B;;AAEA,MAAMC,eAAe,GAAG,EAAxB;;AAEA,MAAMC,iBAAiB,GAAIC,OAAD,IAAa;AACnC,MAAIA,OAAO,CAACC,MAAR,IAAkBD,OAAO,CAACC,MAAR,CAAeC,MAAf,GAAwB,CAA9C,EAAgD;AAC5C,WAAOC,aAAa,CAACH,OAAO,CAACC,MAAT,CAApB;AACH;;AACD,SAAOE,aAAa,CAACH,OAAO,CAACI,KAAT,CAApB;AACH,CALD;;AAOA,MAAMC,YAAY,GAAGD,KAAK,IAAI;AAC1B,MAAI,CAACE,MAAM,CAACC,QAAP,CAAgBH,KAAhB,CAAL,EAA4B;AACxBA,IAAAA,KAAK,GAAGE,MAAM,CAACE,IAAP,CAAYZ,cAAc,CAACQ,KAAD,CAA1B,EAAmC,KAAnC,CAAR;AACH;;AAED,QAAMK,CAAC,GAAGH,MAAM,CAACI,KAAP,CAAaZ,eAAb,EAA8B,CAA9B,CAAV;AACA,QAAMa,KAAK,GAAGC,KAAK,CAAC,CAAD,CAAnB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBF,IAAAA,KAAK,CAACE,CAAD,CAAL,GAAW,wBAAST,KAAK,CAACS,CAAD,CAAd,EAAmB,EAAnB,CAAX;;AACA,QAAI,CAACT,KAAK,CAAC,CAAD,CAAL,GAAY,KAAKS,CAAlB,KAAyB,CAA7B,EAAgC;AAC5BF,MAAAA,KAAK,CAACE,CAAD,CAAL,IAAY,GAAZ;AACH;AACJ;;AAED,OAAI,IAAIA,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACtB,UAAMC,SAAS,GAAG,wBAASH,KAAK,CAACE,CAAD,CAAL,GAAW,CAApB,EAAuB,EAAvB,CAAlB;AACA,UAAME,QAAQ,GAAG,wBAASJ,KAAK,CAACE,CAAD,CAAL,GAAW,CAApB,EAAuB,EAAvB,CAAjB;AACAJ,IAAAA,CAAC,CAACK,SAAD,CAAD,GAAgB,KAAKC,QAArB;AACH;;AACD,SAAON,CAAP;AACH,CArBD;;AAuBA,MAAMN,aAAa,GAAIF,MAAD,IAAY;AAC9B,MAAIe,IAAI,GAAGV,MAAM,CAACI,KAAP,CAAaZ,eAAb,EAA8B,CAA9B,CAAX;;AACA,OAAK,IAAImB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGhB,MAAM,CAACC,MAA/B,EAAuCe,GAAG,EAA1C,EAA8C;AAC5C,UAAMC,KAAK,GAAGb,YAAY,CAACJ,MAAM,CAACgB,GAAD,CAAP,CAA1B;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,eAApB,EAAqCqB,CAAC,EAAtC,EAA0C;AACxCH,MAAAA,IAAI,CAACG,CAAD,CAAJ,GAAUH,IAAI,CAACG,CAAD,CAAJ,GAAUD,KAAK,CAACC,CAAD,CAAzB;AACD;AACF;;AAED,MAAIC,QAAQ,GAAGd,MAAM,CAACI,KAAP,CAAaZ,eAAb,EAA8B,CAA9B,CAAf;AACAsB,EAAAA,QAAQ,GAAGd,MAAM,CAACe,MAAP,CAAc,CAACL,IAAD,EAAOI,QAAQ,CAACE,KAAT,CAAexB,eAAe,GAAGkB,IAAI,CAACd,MAAtC,CAAP,CAAd,CAAX;AACA,SAAOkB,QAAP;AACH,CAZD;;AAcAG,MAAM,CAACC,OAAP,GAAiB;AACbzB,EAAAA,iBADa;AAEbM,EAAAA,YAFa;AAGbF,EAAAA;AAHa,CAAjB","sourcesContent":["const stripHexPrefix = require('strip-hex-prefix');\n\nconst BloomFilterSize = 64;\n\nconst createBloomFilter = (message) => {\n    if (message.topics && message.topics.length > 0){\n        return topicsToBloom(message.topics);\n    }\n    return topicsToBloom(message.topic);\n};\n\nconst topicToBloom = topic => {\n    if (!Buffer.isBuffer(topic)){\n        topic = Buffer.from(stripHexPrefix(topic), 'hex');\n    }\n\n    const b = Buffer.alloc(BloomFilterSize, 0);\n    const index = Array(3);\n\n    for (let j = 0; j < 3; j++) {\n        index[j] = parseInt(topic[j], 10);\n        if ((topic[3] & (1 << j)) != 0) {\n            index[j] += 256;\n        }\n    }\n\n    for(let j = 0; j < 3; j++){\n        const byteIndex = parseInt(index[j] / 8, 10);\n        const bitIndex = parseInt(index[j] % 8, 10);\n        b[byteIndex] = (1 << bitIndex);\n    }\n    return b;\n};\n\nconst topicsToBloom = (topics) => {\n    let data = Buffer.alloc(BloomFilterSize, 0);\n    for (let idx = 0; idx < topics.length; idx++) {\n      const bloom = topicToBloom(topics[idx]);\n      for (let i = 0; i < BloomFilterSize; i++) {\n        data[i] = data[i] | bloom[i];\n      }\n    }\n\n    let combined = Buffer.alloc(BloomFilterSize, 0);\n    combined = Buffer.concat([data, combined.slice(BloomFilterSize - data.length)]);\n    return combined;\n};\n\nmodule.exports = {\n    createBloomFilter,\n    topicToBloom,\n    topicsToBloom\n};\n"],"file":"bloom.js"}